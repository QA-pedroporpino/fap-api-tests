{
	"info": {
		"_postman_id": "9680b07d-0d6d-4ec9-8c82-a4c713d61202",
		"name": "/api/v1/clients",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37354928"
	},
	"item": [
		{
			"name": "Listar todas os clientes - 200 OK",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bearer_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://fap-clinic.stage.b2b.kompa.com.br/api/v1/clients",
					"protocol": "https",
					"host": [
						"fap-clinic",
						"stage",
						"b2b",
						"kompa",
						"com",
						"br"
					],
					"path": [
						"api",
						"v1",
						"clients"
					]
				}
			},
			"response": []
		},
		{
			"name": "Criar um cliente   - 201 Created",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"\r",
							"// Captura do client_id\r",
							"if (response.id) {\r",
							"    pm.environment.set(\"client_id\", response.id);\r",
							"    console.log(\"Client ID salvo: \" + response.id);\r",
							"} else {\r",
							"    console.warn(\"Não foi possível capturar o client_id.\");\r",
							"}\r",
							"\r",
							"// Valida Status\r",
							"pm.test(\"Response status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"// Valida estrutura de client_addresses_relation\r",
							"pm.test(\"Validate client_addresses_relation object structure and required fields\", function () {\r",
							"    pm.expect(response.client_addresses_relation).to.be.an('array').that.is.not.empty;\r",
							"\r",
							"    response.client_addresses_relation.forEach(function(address) {\r",
							"        pm.expect(address).to.have.property('city').that.is.a('string');\r",
							"        pm.expect(address).to.have.property('complement').that.is.a('string');\r",
							"        pm.expect(address).to.have.property('email').that.is.null;\r",
							"        pm.expect(address).to.have.property('neighborhood').that.is.a('string');\r",
							"        pm.expect(address).to.have.property('number').that.is.a('string');\r",
							"        pm.expect(address).to.have.property('phone').that.is.null;\r",
							"        pm.expect(address).to.have.property('state').that.is.a('string');\r",
							"        pm.expect(address).to.have.property('street').that.is.a('string');\r",
							"        pm.expect(address).to.have.property('zip_code').that.is.a('string');\r",
							"    });\r",
							"});\r",
							"\r",
							"// Valida cnae_classification_relation\r",
							"pm.test(\"Cnae_classification_relation object structure and required fields\", function () {\r",
							"    pm.expect(response.cnae_classification_relation).to.be.an('object');\r",
							"    pm.expect(response.cnae_classification_relation.classification_type).to.exist.and.to.be.a('string');\r",
							"    pm.expect(response.cnae_classification_relation.client_id).to.exist.and.to.be.a('number');\r",
							"    pm.expect(response.cnae_classification_relation.date_created).to.exist.and.to.be.a('string');\r",
							"    pm.expect(response.cnae_classification_relation.date_updated).to.exist.and.to.be.a('string');\r",
							"    pm.expect(response.cnae_classification_relation.description).to.exist.and.to.be.a('string');\r",
							"    pm.expect(response.cnae_classification_relation.id).to.exist.and.to.be.a('number');\r",
							"    pm.expect(response.cnae_classification_relation.rate).to.exist.and.to.be.a('string');\r",
							"});\r",
							"\r",
							"// Valida presença dos campos principais\r",
							"pm.test(\"Ensure the presence of specific fields\", function () {\r",
							"    pm.expect(response).to.be.an('object');\r",
							"    pm.expect(response).to.include.all.keys(\r",
							"        \"exam_price_table_id\", \r",
							"        \"legal_representative\", \r",
							"        \"specialty_price_table_id\", \r",
							"        \"state_registration\"\r",
							"    );\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const baseCNPJ = '98.' + Math.floor(100000 + Math.random() * 899999).toString() + '/0001-';\r",
							"const randomDigit = Math.floor(Math.random() * 100).toString().padStart(2, '0');\r",
							"pm.environment.set(\"dynamicCNPJ\", baseCNPJ + randomDigit);\r",
							"\r",
							"// Timestamp pra outros usos\r",
							"pm.environment.set(\"timestamp\", Date.now());\r",
							"\r",
							"// Definindo contract_status de forma dinâmica (opcional)\r",
							"pm.environment.set(\"contract_status\", \"Ativo\");\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"cnae_classification_relation\": {\r\n    \"classification_type\": \"Atendimento Geral\",\r\n    \"description\": \"Serviços gerais de atendimento ao paciente\",\r\n    \"rate\": 150\r\n  },\r\n  \"documents_relation\": {\r\n    \"filename\": \"doc.pdf\",\r\n    \"url\": \"http://...\"\r\n  },\r\n  \"coordinator_relation\": {\r\n    \"name\": \"Admin Atualizado\",\r\n    \"crm\": \"CRM1234\",\r\n    \"email\": \"atualizado@example.com\",\r\n    \"phone\": \"1133334444\",\r\n    \"state\": \"SP\"\r\n  },\r\n  \"cnpj\": \"{{dynamicCNPJ}}\",\r\n  \"social_name\": \"Cliente Y SA\",\r\n  \"state_registration\": \"654321\",\r\n  \"company_type\": \"SA\",\r\n  \"legal_representative\": \"Ciclano de Souza\",\r\n  \"pis_number\": \"987.65432.10-2\",\r\n  \"contact_name\": \"Maria\",\r\n  \"contact_email\": \"maria@cliente.com\",\r\n  \"phone\": \"1144445555\",\r\n  \"mobile_phone\": \"1191112222\",\r\n  \"contract_status\": \"ATIVO\",\r\n  \"exam_price_table_id\": 202,\r\n  \"specialty_price_table_id\": 186,\r\n  \"client_addresses_relation\": [\r\n    {\r\n      \"zip_code\": \"12345-678\",\r\n      \"street\": \"Av. Brasil\",\r\n      \"number\": \"1000\",\r\n      \"complement\": \"Apto 10\",\r\n      \"neighborhood\": \"Centro\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\"\r\n    }\r\n  ]\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://fap-clinic.stage.b2b.kompa.com.br/api/v1/clients\n",
					"protocol": "https",
					"host": [
						"fap-clinic",
						"stage",
						"b2b",
						"kompa",
						"com",
						"br"
					],
					"path": [
						"api",
						"v1",
						"clients\n"
					]
				}
			},
			"response": []
		},
		{
			"name": "Obter Cliente pelo ID- 200 OK",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for status code\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"// Test for response body properties\r",
							"pm.test(\"Response body has client_addresses_relation\", function () {\r",
							"    pm.expect(pm.response.json()).to.have.property('client_addresses_relation');\r",
							"});\r",
							"\r",
							"pm.test(\"Response body has cnae_classification_relation\", function () {\r",
							"    pm.expect(pm.response.json()).to.have.property('cnae_classification_relation');\r",
							"});\r",
							"\r",
							"pm.test(\"Response body has cnpj\", function () {\r",
							"    pm.expect(pm.response.json()).to.have.property('cnpj');\r",
							"});\r",
							"\r",
							"pm.test(\"Response body has contact_email\", function () {\r",
							"    pm.expect(pm.response.json()).to.have.property('contact_email');\r",
							"});\r",
							"\r",
							"pm.test(\"Response body has contact_name\", function () {\r",
							"    pm.expect(pm.response.json()).to.have.property('contact_name');\r",
							"});\r",
							"\r",
							"pm.test(\"Response body has coordinator_relation\", function () {\r",
							"    pm.expect(pm.response.json()).to.have.property('coordinator_relation');\r",
							"});\r",
							"\r",
							"pm.test(\"Response body has date_created\", function () {\r",
							"    pm.expect(pm.response.json()).to.have.property('date_created');\r",
							"});\r",
							"\r",
							"pm.test(\"Response body has date_updated\", function () {\r",
							"    pm.expect(pm.response.json()).to.have.property('date_updated');\r",
							"});\r",
							"\r",
							"pm.test(\"Response body has documents_relation\", function () {\r",
							"    pm.expect(pm.response.json()).to.have.property('documents_relation');\r",
							"});\r",
							"\r",
							"pm.test(\"Response body has exam_price_table_id\", function () {\r",
							"    pm.expect(pm.response.json()).to.have.property('exam_price_table_id');\r",
							"});\r",
							"\r",
							"pm.test(\"Response body has id\", function () {\r",
							"    pm.expect(pm.response.json()).to.have.property('id');\r",
							"});\r",
							"\r",
							"pm.test(\"Response body has legal_representative\", function () {\r",
							"    pm.expect(pm.response.json()).to.have.property('legal_representative');\r",
							"});\r",
							"\r",
							"pm.test(\"Response body has mobile_phone\", function () {\r",
							"    pm.expect(pm.response.json()).to.have.property('mobile_phone');\r",
							"});\r",
							"\r",
							"pm.test(\"Response body has phone\", function () {\r",
							"    pm.expect(pm.response.json()).to.have.property('phone');\r",
							"});\r",
							"\r",
							"pm.test(\"Response body has pis_number\", function () {\r",
							"    pm.expect(pm.response.json()).to.have.property('pis_number');\r",
							"});\r",
							"\r",
							"pm.test(\"Response body has social_name\", function () {\r",
							"    pm.expect(pm.response.json()).to.have.property('social_name');\r",
							"});\r",
							"\r",
							"pm.test(\"Response body has specialty_price_table_id\", function () {\r",
							"    pm.expect(pm.response.json()).to.have.property('specialty_price_table_id');\r",
							"});\r",
							"\r",
							"pm.test(\"Response body has state_registration\", function () {\r",
							"    pm.expect(pm.response.json()).to.have.property('state_registration');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://fap-clinic.stage.b2b.kompa.com.br/api/v1/clients/{{client_id}}",
					"protocol": "https",
					"host": [
						"fap-clinic",
						"stage",
						"b2b",
						"kompa",
						"com",
						"br"
					],
					"path": [
						"api",
						"v1",
						"clients",
						"{{client_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Atualizar um cliente existente - 200 OK",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Valida o status code\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Processa o corpo da resposta\r",
							"let response = pm.response.json();\r",
							"\r",
							"if (response.id) {\r",
							"    pm.environment.set(\"client_id\", response.id);\r",
							"    pm.environment.set(\"client_cnpj\", response.cnpj);\r",
							"    pm.environment.set(\"exam_price_table_id\", response.exam_price_table_id);\r",
							"    pm.environment.set(\"specialty_price_table_id\", response.specialty_price_table_id);\r",
							"    console.log(\"Client atualizado e salvo:\", response.id);\r",
							"} else {\r",
							"    console.warn(\"Não foi possível atualizar/salvar o cliente no ambiente.\");\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"if (!pm.environment.get(\"client_id\")) {\r",
							"    throw new Error(\"client_id não está definido. Execute o POST ou GET primeiro.\");\r",
							"}\r",
							"if (!pm.environment.get(\"dynamicCNPJ\")) {\r",
							"    throw new Error(\"dynamicCNPJ não está definido. Execute o POST ou defina a variável.\");\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"cnae_classification_relation\": {\r\n    \"classification_type\": \"Atendimento Geral\",\r\n    \"description\": \"Serviços gerais de atendimento ao paciente\",\r\n    \"rate\": 150\r\n  },\r\n  \"documents_relation\": {\r\n    \"filename\": \"doc.pdf\",\r\n    \"url\": \"http://...\"\r\n  },\r\n  \"coordinator_relation\": {\r\n    \"name\": \"Admin Atualizado\",\r\n    \"crm\": \"CRM1234\",\r\n    \"email\": \"atualizado@example.com\",\r\n    \"phone\": \"1133334444\",\r\n    \"state\": \"SP\"\r\n  },\r\n  \"cnpj\": \"{{dynamicCNPJ}}\",\r\n  \"social_name\": \"Cliente Y SA\",\r\n  \"state_registration\": \"654321\",\r\n  \"company_type\": \"SA\",\r\n  \"legal_representative\": \"Ciclano de Souza\",\r\n  \"pis_number\": \"987.65432.10-2\",\r\n  \"contact_name\": \"Maria\",\r\n  \"contact_email\": \"maria@cliente.com\",\r\n  \"phone\": \"1144445555\",\r\n  \"mobile_phone\": \"1191112222\",\r\n  \"exam_price_table_id\": 187,\r\n  \"specialty_price_table_id\": 186,\r\n  \"client_addresses_relation\": [\r\n    {\r\n      \"zip_code\": \"12345-678\",\r\n      \"street\": \"Av. Brasil\",\r\n      \"number\": \"1000\",\r\n      \"complement\": \"Apto 10\",\r\n      \"neighborhood\": \"Centro\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\"\r\n    }\r\n  ]\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://fap-clinic.stage.b2b.kompa.com.br/api/v1/clients/{{client_id}}",
					"protocol": "https",
					"host": [
						"fap-clinic",
						"stage",
						"b2b",
						"kompa",
						"com",
						"br"
					],
					"path": [
						"api",
						"v1",
						"clients",
						"{{client_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Deletar um feriado - 204 No Content",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"DELETE - Verificar Exclusão do Cliente\", function() {\r",
							"    pm.expect(pm.response.code).to.eql(204);\r",
							"    console.log(\"Cliente excluído com sucesso.\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://fap-clinic.stage.b2b.kompa.com.br/api/v1/clients/{{client_id}}",
					"protocol": "https",
					"host": [
						"fap-clinic",
						"stage",
						"b2b",
						"kompa",
						"com",
						"br"
					],
					"path": [
						"api",
						"v1",
						"clients",
						"{{client_id}}"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{bearer_token}}\n",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"const token = pm.globals.get('bearer_token');\r",
					"\r",
					"if (token) {\r",
					"    pm.request.headers.upsert({\r",
					"        key: 'Authorization',\r",
					"        value: `Bearer ${token}`\r",
					"    });\r",
					"} else {\r",
					"    console.warn('Token não encontrado na variável global.');\r",
					"}\r",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "bearer_token",
			"value": "",
			"type": "string"
		}
	]
}