{
	"info": {
		"_postman_id": "9680b07d-0d6d-4ec9-8c82-a4c713d61202",
		"name": "/api/v1/clients",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37354928"
	},
	"item": [
		{
			"name": "Listar todas os clientes - 200 OK",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the schema for the 'objects' array and its nested fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.objects).to.be.an('array').and.to.have.lengthOf(1);\r",
							"\r",
							"    responseData.objects.forEach(function (obj) {\r",
							"        pm.expect(obj).to.have.property('client_addresses_relation').that.is.an('array');\r",
							"        obj.client_addresses_relation.forEach(function (address) {\r",
							"            pm.expect(address).to.be.an('object');\r",
							"            pm.expect(address).to.have.property('city').that.is.a('string');\r",
							"            pm.expect(address).to.have.property('client_id').that.is.a('number');\r",
							"            pm.expect(address).to.have.property('complement').that.is.a('string');\r",
							"            pm.expect(address).to.have.property('date_created').that.is.a('string');\r",
							"            pm.expect(address).to.have.property('date_updated').that.is.a('string');\r",
							"            pm.expect(address).to.have.property('id').that.is.a('number');\r",
							"            pm.expect(address).to.have.property('neighborhood').that.is.a('string');\r",
							"            pm.expect(address).to.have.property('number').that.is.a('string');\r",
							"            pm.expect(address).to.have.property('patients_id').that.is.null;\r",
							"            pm.expect(address).to.have.property('reference_point').that.is.null;\r",
							"            pm.expect(address).to.have.property('state').that.is.a('string');\r",
							"            pm.expect(address).to.have.property('street').that.is.a('string');\r",
							"            pm.expect(address).to.have.property('type_address').that.is.null;\r",
							"            pm.expect(address).to.have.property('zip_code').that.is.a('string');\r",
							"        });\r",
							"\r",
							"        pm.expect(obj).to.have.property('cnae_classification_relation').that.is.an('object');\r",
							"        pm.expect(obj.cnae_classification_relation).to.have.property('classification_type').that.is.a('string');\r",
							"        pm.expect(obj.cnae_classification_relation).to.have.property('client_id').that.is.a('number');\r",
							"        pm.expect(obj.cnae_classification_relation).to.have.property('clinic_id').that.is.null;\r",
							"        pm.expect(obj.cnae_classification_relation).to.have.property('date_created').that.is.a('string');\r",
							"        pm.expect(obj.cnae_classification_relation).to.have.property('date_updated').that.is.a('string');\r",
							"        pm.expect(obj.cnae_classification_relation).to.have.property('description').that.is.a('string');\r",
							"        pm.expect(obj.cnae_classification_relation).to.have.property('id').that.is.a('number');\r",
							"        pm.expect(obj.cnae_classification_relation).to.have.property('rate').that.is.a('string');\r",
							"\r",
							"        pm.expect(obj).to.have.property('cnpj').that.is.a('string');\r",
							"        pm.expect(obj).to.have.property('company_type').that.is.a('string');\r",
							"        pm.expect(obj).to.have.property('contact_email').that.is.a('string');\r",
							"        pm.expect(obj).to.have.property('contact_name').that.is.a('string');\r",
							"        \r",
							"        // ... (continue testing other properties)\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Num results field is present and has a valid value\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.have.property('num_results');\r",
							"    pm.expect(responseData.num_results).to.be.a('number');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"CNPJ field has a valid format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.objects[0].cnpj).to.match(/^\\d{2}\\.\\d{3}\\.\\d{3}\\/\\d{4}-\\d{2}$/);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://fap-clinic.stage.b2b.kompa.com.br/api/v1/clients",
					"protocol": "https",
					"host": [
						"fap-clinic",
						"stage",
						"b2b",
						"kompa",
						"com",
						"br"
					],
					"path": [
						"api",
						"v1",
						"clients"
					]
				}
			},
			"response": []
		},
		{
			"name": "Criar um cliente   - 201 Created",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"POST - Verificar Criação do Cliente\", function() {\r",
							"    pm.expect(pm.response.code).to.eql(201);\r",
							"    const responseData = pm.response.json();\r",
							"    pm.environment.set(\"clientId\", responseData.id);\r",
							"    console.log(\"Cliente criado com ID:\", responseData.id);\r",
							"});\r",
							"// Test for the response code\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"// Test for the response time\r",
							"pm.test(\"Response time is less than 600ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
							"});\r",
							"\r",
							"// Test for the content type of the response\r",
							"pm.test(\"Content type is application/json\", function () {\r",
							"    pm.response.to.have.header('Content-Type', 'application/json');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Gerar CNPJ dinâmico\r",
							"const cnpjBase = \"98.\" + Math.floor(Math.random() * 900) + 100 + \".432/0001\";\r",
							"const cnpj = cnpjBase.substring(0, 18);\r",
							"pm.environment.set(\"dynamicCNPJ\", cnpj);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"cnae_classification_relation\": {\r\n    \"classification_type\": \"Atendimento Geral\",\r\n    \"description\": \"Serviços gerais de atendimento ao paciente\",\r\n    \"rate\": 150\r\n  },\r\n  \"documents_relation\": {\r\n    \"filename\": \"doc.pdf\",\r\n    \"url\": \"http://...\"\r\n  },\r\n  \"coordinator_relation\": {\r\n    \"name\": \"Admin Atualizado\",\r\n    \"crm\": \"CRM1234\",\r\n    \"email\": \"atualizado@example.com\",\r\n    \"phone\": \"1133334444\",\r\n    \"state\": \"SP\"\r\n  },\r\n  \"cnpj\": \"{{dynamicCNPJ}}\",\r\n  \"social_name\": \"Cliente Y SA\",\r\n  \"state_registration\": \"654321\",\r\n  \"company_type\": \"SA\",\r\n  \"legal_representative\": \"Ciclano de Souza\",\r\n  \"pis_number\": \"987.65432.10-2\",\r\n  \"contact_name\": \"Maria\",\r\n  \"contact_email\": \"maria@cliente.com\",\r\n  \"phone\": \"1144445555\",\r\n  \"mobile_phone\": \"1191112222\",\r\n  \"exam_price_table_id\": 1,\r\n  \"specialty_price_table_id\": 1,\r\n  \"client_addresses_relation\": [\r\n    {\r\n      \"zip_code\": \"12345-678\",\r\n      \"street\": \"Av. Brasil\",\r\n      \"number\": \"1000\",\r\n      \"complement\": \"Apto 10\",\r\n      \"neighborhood\": \"Centro\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\"\r\n    }\r\n  ]\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://fap-clinic.stage.b2b.kompa.com.br/api/v1/clients\n",
					"protocol": "https",
					"host": [
						"fap-clinic",
						"stage",
						"b2b",
						"kompa",
						"com",
						"br"
					],
					"path": [
						"api",
						"v1",
						"clients\n"
					]
				}
			},
			"response": []
		},
		{
			"name": "Obter Cliente pelo ID- 200 OK",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for status code\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test for response time\r",
							"pm.test(\"Response time is less than 300ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
							"});\r",
							"\r",
							"// Test for content type\r",
							"pm.test(\"Content type is application/json\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
							"});\r",
							"\r",
							"// Test for specific fields in the response body\r",
							"const responseBody = pm.response.json();\r",
							"pm.test(\"Verify client ID in the response\", function () {\r",
							"    pm.expect(responseBody.id).to.eql(50);\r",
							"});\r",
							"pm.test(\"Verify client address city\", function () {\r",
							"    pm.expect(responseBody.client_addresses_relation[0].city).to.eql(\"São Paulo\");\r",
							"});\r",
							"pm.test(\"Verify contact email\", function () {\r",
							"    pm.expect(responseBody.contact_email).to.eql(\"maria@cliente.com\");\r",
							"});\r",
							"pm.test(\"Verify mobile phone\", function () {\r",
							"    pm.expect(responseBody.mobile_phone).to.eql(\"1191112222\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Garantir que o clientId esteja armazenado\r",
							"const clientId = pm.environment.get(\"clientId\");\r",
							"\r",
							"if (!clientId) {\r",
							"    throw new Error(\"ID do cliente não está definido no ambiente.\");\r",
							"}\r",
							"\r",
							"console.log(\"ID utilizado para o GET:\", clientId);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://fap-clinic.stage.b2b.kompa.com.br/api/v1/clients/{{clientId}}",
					"protocol": "https",
					"host": [
						"fap-clinic",
						"stage",
						"b2b",
						"kompa",
						"com",
						"br"
					],
					"path": [
						"api",
						"v1",
						"clients",
						"{{clientId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Atualizar um cliente existente - 200 OK",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Client addresses relation object has the correct structure\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.client_addresses_relation).to.be.an('array').that.is.not.empty;\r",
							"    \r",
							"    responseData.client_addresses_relation.forEach(function(address) {\r",
							"        pm.expect(address).to.have.property('city').that.is.a('string');\r",
							"        pm.expect(address).to.have.property('client_id').that.is.a('number');\r",
							"        pm.expect(address).to.have.property('clinic_id');\r",
							"        pm.expect(address).to.have.property('complement').that.is.a('string');\r",
							"        pm.expect(address).to.have.property('date_created').that.is.a('string');\r",
							"        pm.expect(address).to.have.property('date_updated').that.is.a('string');\r",
							"        pm.expect(address).to.have.property('id').that.is.a('number');\r",
							"        pm.expect(address).to.have.property('neighborhood').that.is.a('string');\r",
							"        pm.expect(address).to.have.property('number').that.is.a('string');\r",
							"        pm.expect(address).to.have.property('patients_id');\r",
							"        pm.expect(address).to.have.property('reference_point');\r",
							"        pm.expect(address).to.have.property('state').that.is.a('string');\r",
							"        pm.expect(address).to.have.property('street').that.is.a('string');\r",
							"        pm.expect(address).to.have.property('type_address');\r",
							"        pm.expect(address).to.have.property('zip_code').that.is.a('string');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Cnae classification relation object must have the correct structure\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.cnae_classification_relation).to.be.an('object');\r",
							"    pm.expect(responseData.cnae_classification_relation).to.have.property('classification_type');\r",
							"    pm.expect(responseData.cnae_classification_relation).to.have.property('client_id');\r",
							"    pm.expect(responseData.cnae_classification_relation).to.have.property('clinic_id');\r",
							"    pm.expect(responseData.cnae_classification_relation).to.have.property('date_created');\r",
							"    pm.expect(responseData.cnae_classification_relation).to.have.property('date_updated');\r",
							"    pm.expect(responseData.cnae_classification_relation).to.have.property('description');\r",
							"    pm.expect(responseData.cnae_classification_relation).to.have.property('id');\r",
							"    pm.expect(responseData.cnae_classification_relation).to.have.property('rate');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Gerar CNPJ dinâmico\r",
							"const cnpjBase = \"98.\" + Math.floor(Math.random() * 900) + 100 + \".432/0001\";\r",
							"const cnpj = cnpjBase.substring(0, 18);\r",
							"pm.environment.set(\"dynamicCNPJ\", cnpj);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"cnae_classification_relation\": {\r\n    \"classification_type\": \"Atendimento Geral\",\r\n    \"description\": \"Serviços gerais de atendimento ao paciente\",\r\n    \"rate\": 150\r\n  },\r\n  \"documents_relation\": {\r\n    \"filename\": \"doc.pdf\",\r\n    \"url\": \"http://...\"\r\n  },\r\n  \"coordinator_relation\": {\r\n    \"name\": \"Admin Atualizado\",\r\n    \"crm\": \"CRM1234\",\r\n    \"email\": \"atualizado@example.com\",\r\n    \"phone\": \"1133334444\",\r\n    \"state\": \"SP\"\r\n  },\r\n  \"cnpj\": \"{{dynamicCNPJ}}\",\r\n  \"social_name\": \"Cliente Y SA\",\r\n  \"state_registration\": \"654321\",\r\n  \"company_type\": \"SA\",\r\n  \"legal_representative\": \"Ciclano de Souza\",\r\n  \"pis_number\": \"987.65432.10-2\",\r\n  \"contact_name\": \"Maria\",\r\n  \"contact_email\": \"maria@cliente.com\",\r\n  \"phone\": \"1144445555\",\r\n  \"mobile_phone\": \"1191112222\",\r\n  \"exam_price_table_id\": 1,\r\n  \"specialty_price_table_id\": 1,\r\n  \"client_addresses_relation\": [\r\n    {\r\n      \"zip_code\": \"12345-678\",\r\n      \"street\": \"Av. Brasil\",\r\n      \"number\": \"1000\",\r\n      \"complement\": \"Apto 10\",\r\n      \"neighborhood\": \"Centro\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\"\r\n    }\r\n  ]\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://fap-clinic.stage.b2b.kompa.com.br/api/v1/clients/{{clientId}}",
					"protocol": "https",
					"host": [
						"fap-clinic",
						"stage",
						"b2b",
						"kompa",
						"com",
						"br"
					],
					"path": [
						"api",
						"v1",
						"clients",
						"{{clientId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Deletar um feriado - 204 No Content",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"DELETE - Verificar Exclusão do Cliente\", function() {\r",
							"    pm.expect(pm.response.code).to.eql(204);\r",
							"    console.log(\"Cliente excluído com sucesso.\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Verifica se o clientId foi salvo no ambiente\r",
							"if (!pm.environment.get(\"clientId\")) {\r",
							"    throw new Error(\"clientId não encontrado. Execute o POST primeiro.\");\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://fap-clinic.stage.b2b.kompa.com.br/api/v1/clients/{{clientId}}\n",
					"protocol": "https",
					"host": [
						"fap-clinic",
						"stage",
						"b2b",
						"kompa",
						"com",
						"br"
					],
					"path": [
						"api",
						"v1",
						"clients",
						"{{clientId}}\n"
					]
				}
			},
			"response": []
		}
	]
}