{
	"info": {
		"_postman_id": "42776757-d25b-4f05-80f8-5c436e8953f0",
		"name": "/api/v1/schedules",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37354928"
	},
	"item": [
		{
			"name": "Listar todas as agendas - 200 OK",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response = pm.response.json();\r",
							"\r",
							"// Validação do status code\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"// Verificação da estrutura do JSON\r",
							"pm.test(\"Response is an array and contains schedules\", function () {\r",
							"    pm.expect(response.objects).to.be.an(\"array\");\r",
							"    if (response.objects.length > 0) {\r",
							"        pm.expect(response.objects[0]).to.have.property(\"id\");\r",
							"        pm.expect(response.objects[0]).to.have.property(\"start_date\");\r",
							"        pm.expect(response.objects[0]).to.have.property(\"end_date\");\r",
							"        pm.expect(response.objects[0]).to.have.property(\"professional_id\");\r",
							"\r",
							"        // Armazenando o primeiro ID para o PUT e DELETE\r",
							"        pm.environment.set(\"scheduleId\", response.objects[0].id);\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Definindo timestamp dinâmico para garantir unicidade\r",
							"let timestamp = new Date().getTime();\r",
							"pm.environment.set(\"uniqueId\", timestamp);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://fap-clinic.stage.b2b.kompa.com.br/api/v1/schedules",
					"protocol": "https",
					"host": [
						"fap-clinic",
						"stage",
						"b2b",
						"kompa",
						"com",
						"br"
					],
					"path": [
						"api",
						"v1",
						"schedules"
					]
				}
			},
			"response": []
		},
		{
			"name": "Criar uma nova agenda - 201 Created",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response = pm.response.json();\r",
							"\r",
							"// Validação do status code\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.expect(pm.response.code).to.eql(201);\r",
							"});\r",
							"\r",
							"// Verificar a estrutura da resposta e armazenar o novo ID\r",
							"pm.test(\"Schedule created successfully\", function () {\r",
							"    pm.expect(response).to.have.property(\"id\");\r",
							"    pm.expect(response).to.have.property(\"start_date\");\r",
							"    pm.expect(response).to.have.property(\"end_date\");\r",
							"    \r",
							"    pm.environment.set(\"scheduleId\", response.id);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Gerar payload dinâmico\r",
							"let newSchedule = {\r",
							"  \"start_date\": \"2024-06-01\",\r",
							"  \"end_date\": \"2024-06-30\",\r",
							"  \"start_time\": \"08:00:00\",\r",
							"  \"end_time\": \"18:00:00\",\r",
							"  \"interval_time\": 15,\r",
							"  \"is_arrival_order\": false,\r",
							"  \"service_duration\": 30,\r",
							"  \"is_telemedicine\": false,\r",
							"  \"block_online_schedule\": false,\r",
							"  \"days\": [1, 2, 3, 4, 5],\r",
							"  \"work_in_holidays\": false,\r",
							"  \"lunch_start_time\": \"12:00:00\",\r",
							"  \"lunch_end_time\": \"13:00:00\",\r",
							"  \"professional_id\": 1\r",
							"};\r",
							"\r",
							"pm.environment.set(\"schedulePayload\", JSON.stringify(newSchedule));\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"start_date\": \"2024-06-01\",\r\n  \"end_date\": \"2024-06-30\",\r\n  \"start_time\": \"08:00:00\",\r\n  \"end_time\": \"18:00:00\",\r\n  \"interval_time\": 15,\r\n  \"is_arrival_order\": false,\r\n  \"service_duration\": 30,\r\n  \"is_telemedicine\": false,\r\n  \"block_online_schedule\": false,\r\n  \"days\": [\r\n    1,\r\n    2,\r\n    3,\r\n    4,\r\n    5\r\n  ],\r\n  \"work_in_holidays\": false,\r\n  \"lunch_start_time\": \"12:00:00\",\r\n  \"lunch_end_time\": \"13:00:00\",\r\n  \"professional_id\": 1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://fap-clinic.stage.b2b.kompa.com.br/api/v1/schedules",
					"protocol": "https",
					"host": [
						"fap-clinic",
						"stage",
						"b2b",
						"kompa",
						"com",
						"br"
					],
					"path": [
						"api",
						"v1",
						"schedules"
					]
				}
			},
			"response": []
		},
		{
			"name": "Obter agenda por ID - 200 OK",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for status code\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test for response time\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"// Test for response body properties\r",
							"pm.test(\"Response body has properties\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id).to.exist;\r",
							"    pm.expect(jsonData.professional_id).to.exist;\r",
							"    pm.expect(jsonData.start_date).to.exist;\r",
							"    pm.expect(jsonData.end_date).to.exist;\r",
							"    pm.expect(jsonData.service_duration).to.exist;\r",
							"    pm.expect(jsonData.days).to.be.an('array');\r",
							"    pm.expect(jsonData.professional_relation).to.be.an('object');\r",
							"});\r",
							"\r",
							"// Test for content type\r",
							"pm.test(\"Content type is application/json\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Verificar se o ID foi armazenado\r",
							"pm.test(\"Schedule ID is set\", function () {\r",
							"    pm.expect(pm.environment.get(\"scheduleId\")).to.not.be.undefined;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://fap-clinic.stage.b2b.kompa.com.br/api/v1/schedules/{{scheduleId}}",
					"protocol": "https",
					"host": [
						"fap-clinic",
						"stage",
						"b2b",
						"kompa",
						"com",
						"br"
					],
					"path": [
						"api",
						"v1",
						"schedules",
						"{{scheduleId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Atualizar uma agenda existente - 200 OK",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test 1: Verify the status code is 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate 'days' field in response\", function () {\r",
							"    const responseDays = pm.response.json().days;\r",
							"    const validDays = [[1, 3], [1, 3, 5]];\r",
							"\r",
							"    const isMatch = validDays.some(expected => JSON.stringify(responseDays) === JSON.stringify(expected));\r",
							"\r",
							"    pm.expect(isMatch).to.be.true;\r",
							"    console.log(\"Response 'days':\", responseDays);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Verificar se o scheduleId foi armazenado no ambiente\r",
							"pm.test(\"Schedule ID is set\", function () {\r",
							"    pm.expect(pm.environment.get(\"scheduleId\")).to.not.be.undefined;\r",
							"});\r",
							"\r",
							"// Geração de timestamp para garantir que a atualização será única\r",
							"let timestamp = new Date().getTime();\r",
							"\r",
							"// Criar o payload dinâmico para atualização\r",
							"let updatedSchedule = {\r",
							"  \"start_date\": \"2024-07-01\",\r",
							"  \"end_date\": \"2024-07-15\",\r",
							"  \"start_time\": \"09:00:00\",\r",
							"  \"end_time\": \"17:00:00\",\r",
							"  \"interval_time\": 30,\r",
							"  \"is_arrival_order\": true,\r",
							"  \"service_duration\": 45,\r",
							"  \"is_telemedicine\": true,\r",
							"  \"block_online_schedule\": true,\r",
							"  \"days\": [1, 3, 5],\r",
							"  \"work_in_holidays\": true,\r",
							"  \"lunch_start_time\": \"12:00:00\",\r",
							"  \"lunch_end_time\": \"13:00:00\",\r",
							"  \"professional_id\": 1\r",
							"};\r",
							"\r",
							"// Armazenar o payload atualizado no ambiente para ser utilizado no Body\r",
							"pm.environment.set(\"updatedPayload\", JSON.stringify(updatedSchedule));\r",
							"\r",
							"// Verificar o conteúdo do payload para debug\r",
							"console.log(\"Payload para PUT:\", updatedSchedule);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"start_date\": \"2024-07-01\",\r\n  \"end_date\": \"2024-07-15\",\r\n  \"start_time\": \"09:00:00\",\r\n  \"end_time\": \"17:00:00\",\r\n  \"interval_time\": 30,\r\n  \"is_arrival_order\": true,\r\n  \"service_duration\": 45,\r\n  \"is_telemedicine\": true,\r\n  \"block_online_schedule\": true,\r\n  \"days\": [1, 3, 5],\r\n  \"work_in_holidays\": true,\r\n  \"lunch_start_time\": \"12:00:00\",\r\n  \"lunch_end_time\": \"13:00:00\",\r\n  \"professional_id\": 1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://fap-clinic.stage.b2b.kompa.com.br/api/v1/schedules/{{scheduleId}}",
					"protocol": "https",
					"host": [
						"fap-clinic",
						"stage",
						"b2b",
						"kompa",
						"com",
						"br"
					],
					"path": [
						"api",
						"v1",
						"schedules",
						"{{scheduleId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Deletar uma agenda  - 204 No Content",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Verificar o status code\r",
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.expect(pm.response.code).to.eql(204);\r",
							"});\r",
							"\r",
							"// Limpar o `scheduleId` do ambiente após a exclusão\r",
							"pm.environment.unset(\"scheduleId\");\r",
							"\r",
							"// Mensagem de confirmação no console\r",
							"console.log(\"Schedule ID deleted successfully.\");\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Verificar se o scheduleId foi armazenado no ambiente\r",
							"pm.test(\"Schedule ID is set for deletion\", function () {\r",
							"    pm.expect(pm.environment.get(\"scheduleId\")).to.not.be.undefined;\r",
							"});\r",
							"\r",
							"// Exibir o ID que será utilizado no DELETE para debugging\r",
							"console.log(\"Schedule ID for deletion:\", pm.environment.get(\"scheduleId\"));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "file",
					"file": {}
				},
				"url": {
					"raw": "https://fap-clinic.stage.b2b.kompa.com.br/api/v1/schedules/{{scheduleId}}",
					"protocol": "https",
					"host": [
						"fap-clinic",
						"stage",
						"b2b",
						"kompa",
						"com",
						"br"
					],
					"path": [
						"api",
						"v1",
						"schedules",
						"{{scheduleId}}"
					]
				}
			},
			"response": []
		}
	]
}